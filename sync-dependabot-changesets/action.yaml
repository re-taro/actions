name: Sync changeset to dependabot PR
description: Sync changeset to dependabot PR
inputs:
  token:
    description: GitHub token
    required: true
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref}}
        token: ${{ inputs.token }}
    - name: Configure Git
      run: |
        git config --global user.email action@github.com
        git config --global user.name 'actions-user'
      shell: sh
    - name: Generate changeset
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { promises: fs } = require('fs');

          async function getPackagesNames(files) {
            const names = [];
            for (const file of files) {
              const data = JSON.parse(await fs.readFile(file, 'utf8'));
              if (!data.private) {
                names.push(data.name);
              }
            }

            return names;
          }
          async function createChangeset(fileName, commitMessage, packages) {
            const pkgs = packages.map(pkg => `'${pkg}': patch`).join('\n');
            const message = commitMessage.replace(/([bB])ump ([\S]+)/, '$1ump `$2`').trim();
            const body = `---\n${pkgs}\n---\n\n${message}\n`;
            await fs.writeFile(fileName, body);
          }
          const branch = await exec.getExecOutput('git branch --show-current');
          if (!branch.stdout.startsWith('dependabot/')) {
            console.log('Not a dependabot branch, skipping');

            return;
          }
          const diffOutput = await exec.getExecOutput('git diff --name-only HEAD~1');
          const diffFiles = diffOutput.stdout.split('\n');
          if (diffFiles.find(f => f.startsWith('.changeset'))) {
            console.log('Changeset already exists, skipping');

            return;
          }
          const files = diffFiles
            .filter(file => file.includes('package.json'));
          const packageNames = await getPackagesNames(files);
          if (!packageNames.length) {
            console.log('No package.json changes to published packages, skipping');

            return;
          }
          const { stdout: shortHash } = await exec.getExecOutput('git rev-parse --short HEAD');
          const fileName = `.changeset/dependabot-${shortHash.trim()}.md`;
          const { stdout: commitMessage } = await exec.getExecOutput('git show --pretty=format:%s -s HEAD');
          await createChangeset(fileName, commitMessage, packageNames);
          await exec.exec('git', ['add', fileName]);
          await exec.exec('git commit -C HEAD --amend --no-edit');
          await exec.exec('git push --force');
